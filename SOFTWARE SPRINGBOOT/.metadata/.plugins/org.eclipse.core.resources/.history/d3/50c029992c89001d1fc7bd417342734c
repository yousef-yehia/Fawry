package com.example.demo.Service;

import org.springframework.stereotype.Service;

import com.example.demo.Model.Admin;
import com.example.demo.Model.RefundRequest;
import com.example.demo.Model.User;
import com.example.demo.Model.DiscountsModel.OverallDiscount;
import com.example.demo.Model.DiscountsModel.SpecificDiscount;
import com.example.demo.Model.TransactionsModel.Transaction;

import static com.example.demo.DB.Common.admin;
import static com.example.demo.DB.Common.loggedInUsers;
import static com.example.demo.DB.Common.systemDiscounts;

import java.util.ArrayList;

@Service
public class AdminServiceImpl implements AdminService{
	@Override
	public String signIn(String email, String password) {
			if(admin.getEmail().equals(email) && admin.getPassword().equals(password)) {
				admin.setLoggedIn(true);
				return "Admin signed in sucessfully!";
			}
		return "Wrong credintials!";
	}
	@Override
	public Admin getAdmin() {
		return admin;
	}
	public boolean checkAdmin() {
		if(admin.isLoggedIn()) return true;
		else return false;
	}
	@Override
	public ArrayList<RefundRequest> getAllUserRefundRequests(int userID) {
		User user = getUserByID(userID);
		return user.getRefunds();
	}
	@Override
	public User getUserByID(int userID) {
		for (User user : loggedInUsers) {
			if(user.getID() == userID)
				return user;
		}
		return null;
	}
	@Override
	public ArrayList<Transaction> getAllUserTransactions(int userID){
		User user = getUserByID(userID);
		return user.getTransactions();
	};
	@Override
	public String addDiscount(String type, double value, String sName) {
		if(type.equals("Overall")) {
			systemDiscounts.add(new OverallDiscount(value));
			return "An overall discount of a value of "+value+ "% has been added to the system sucessfully";
		}
		else if(type.equals("Specific")) {
			systemDiscounts.add(new SpecificDiscount(value, sName));
			return "A specific discount of a value of "+value+ "% has been added to the "+ sName +" service sucessfully";
		}
		return "Discount type is invalid!";
	}
	@Override
	public String acceptRefundRequest(String decision, int userID, int transactionID) {
		if(!decision.equals("accept") && !decision.equals("decline")) return "Decision not clear!";
		User user = getUserByID(userID);
		if(user == null) return "User is not found!";
		Transaction desiredTransaction = null;
		for (Transaction t : user.getTransactions()) {
			if(t.getTransactionID() == transactionID)
				desiredTransaction = t;
		}
		if(desiredTransaction == null) return "Refund request is not found!";
		if(desiredTransaction.getType().equals("Refund Transaction")) return "Refund request is not found!";
		double refundedAmount;
		double userBalance;
		if(decision.equals("accept")) {
			refundedAmount = desiredTransaction.getAmount();
			userBalance = user.getWalletBalance();
			user.setWalletBalance(refundedAmount + userBalance);
			user.getTransactions().remove(desiredTransaction);
			return "An amount of "+ refundedAmount + " EGP has been refunded to user "+ user.getUserName();
		}
		else {
			user.getTransactions().remove(desiredTransaction);
			return "Refund request has been declined sucessfully";
		}
	}
	
}
